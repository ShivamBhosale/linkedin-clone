import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';

// Assuming this is a mock API function
const fetchUserData = async (userId) => {
  // Mock implementation, replace with your actual API call
  return { id: userId, name: 'John Doe', email: 'john@example.com' };
};

const initialState = {
  user: null,
  status: 'idle',
};

export const fetchUser = createAsyncThunk(
  'user/fetchUser',
  async (userId) => {
    const response = await fetchUserData(userId);
    return response;
  }
);

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    // Reducers can be added here if needed
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchUser.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchUser.fulfilled, (state, action) => {
        state.status = 'idle';
        state.user = action.payload;
      });
  },
});

// Exporting actions generated by the slice
export const { increment, decrement, incrementByAmount } = userSlice.actions;

// Selector to get the user from the state
export const selectUser = (state) => state.user.user;

export default userSlice.reducer;
